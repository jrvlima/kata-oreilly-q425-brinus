views {

    view index of mobiltiy_corp {

        title 'MobilityCorp / C4 / System Context View'

        description """
        # MobilityCorp System Context View

        This diagram provides an overview of the MobilityCorp system and its interactions with external actors and systems.

        """

        include customer
        include mobiltiy_corp_staff
        include vehicle_Bay_device

        include mobiltiy_corp

        include applications
        
        include edge_ingest_gateway
        include api_gateway

        include microservices

        include platform

        include ai_systems

        include maas
        include omf

    }

    view full of mobiltiy_corp {
        title 'MobilityCorp / C4 / Full System Context View'
        description """
        # MobilityCorp System Context View

        This diagram provides an overview of the MobilityCorp system and its interactions with external actors and systems.

        """

        include customer
        include mobiltiy_corp_staff

        include vehicle_Bay_device

        include mobiltiy_corp

        include applications
        include applications.*

        include api_gateway
        include edge_ingest_gateway

        include microservices
        include microservices.*


        include platform
        include platform.*

        include ai_systems
        include ai_systems.*

        include maas
        include omf
    }

    view telemetry of mobiltiy_corp {

        title 'MobilityCorp / C4 / Telemetry Pipeline Container View'

        description """
        # MobilityCorp Container View - Telemetry Pipeline

        This diagram illustrates the telemetry data pipeline within the MobilityCorp system, detailing the flow of data from IoT devices to various processing and storage components.

        """

        include vehicle_Bay_device

        include edge_ingest_gateway

      
        include stream_processor
        include stream_processor.*

        include queues
        include queues.topic_raw_events
        include queues.topic_inventory_updates
        include queues.topic_alerts

        include object_store_bronze

        include timeseries_olap_db

        include read_model_db

        include batch_orchestrator

    }

    view customer_app of mobiltiy_corp {
      title 'MobilityCorp / C4 / Customer Application Container View'
        description """
        # MobilityCorp Customer Application - Container View

        This diagram provides a detailed view of the Customer Application within the MobilityCorp system, highlighting its components and interactions.

        """

        include customer
        include applications.customer_app.*
        include applications.web_app
        include omf
        include maas
        include api_gateway
        include microservices
        include platform

    }

    view staff_app of mobiltiy_corp {
        title 'MobilityCorp / C4 / Staff Application Container View'
        description "This diagram provides a detailed view of the Staff Application within the MobilityCorp system, highlighting its components and interactions."

        include mobiltiy_corp_staff
        include oncall_engineer
        include applications.staff_app
        include applications.web_app

        include omf
        include maas

        include api_gateway
        include microservices
        include platform
    }

    
    dynamic view fresh_availability {
        title 'Dynamic / Return triggers availability update'

        // Steps
        mobiltiy_corp.edge_ingest_gateway -> mobiltiy_corp.platform.message_broker.queues.topic_raw_events
        'Publish telemetry CloudEvent (vehicle returned)'
        mobiltiy_corp.microservices.booking_service -> mobiltiy_corp.platform.message_broker.queues.topic_domain_events
        'Publish return_completed'

        mobiltiy_corp.platform.message_broker.queues.topic_raw_events
        -> mobiltiy_corp.platform.stream_processor
        'Consume telemetry (event-time; WM=5m)'

        mobiltiy_corp.platform.message_broker.queues.topic_domain_events
        -> mobiltiy_corp.platform.stream_processor
        'Consume booking events'

        mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.message_broker.queues.topic_inventory_updates
        'Publish availability update'

        mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.read_model_db
        'UPSERT available_vehicles (idempotent)'

  }


  dynamic view burst_tolerance {
    title 'Dynamic / Spike 2k→12k events; no loss; lag drains'

    mobiltiy_corp.edge_ingest_gateway
      -> mobiltiy_corp.platform.message_broker.queues.topic_raw_events
      'Burst publish (2k→12k events)'

    mobiltiy_corp.platform.message_broker.queues.topic_raw_events
      -> mobiltiy_corp.platform.stream_processor
      'Consume via partitions & parallel subtasks'

    // Parallel: continue publishing + emit metrics
    parallel {
      mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.message_broker.queues.topic_inventory_updates
        'Continue publishing (no drops)'

      mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.otel
        'Emit metrics: consumer_lag↑, backpressure↑'
    }

    mobiltiy_corp.platform.otel -> oncall_engineer
      'Alert: lag > threshold; observe drain to steady state'

    include
      mobiltiy_corp.edge_ingest_gateway,
      mobiltiy_corp.platform.message_broker.queues.topic_raw_events,
      mobiltiy_corp.platform.stream_processor,
      mobiltiy_corp.platform.message_broker.queues.topic_inventory_updates,
      mobiltiy_corp.platform.otel,
      oncall_engineer
  }

  dynamic view exactly_once_projection {
    title 'Dynamic / Restart + checkpoint resume; idempotent upserts'

    mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.read_model_db
        'UPSERT available_vehicles with stable PK'

    mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.otel
        'Checkpoint N; TX begin' {
        notes '
        **Mechanism**
        - Flink checkpoint barriers
        - Kafka transactions / idempotent sink
        '
        }

    mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.otel
        'Failure detected (OOM) & alert emitted' {
        notes 'Flink reports task failure; Kubernetes restarts TaskManager'
        }

    mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.otel
        'Restore from checkpoint N'

    mobiltiy_corp.platform.stream_processor
        -> mobiltiy_corp.platform.read_model_db
        'Re-apply idempotent upserts (0 dupes)'

    include
        mobiltiy_corp.platform.stream_processor,
        mobiltiy_corp.platform.read_model_db,
        mobiltiy_corp.platform.otel

        
    }



}
