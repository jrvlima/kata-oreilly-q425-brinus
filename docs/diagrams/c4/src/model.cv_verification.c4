/**
 * Computer Vision Verification System with RAG
 *
 * This model extends the main MobilityCorp system to add CV verification capabilities
 * using RAG (Retrieval Augmented Generation) with multimodal LLMs.
 *
 * Implements three use cases:
 * 1. Docking Verification (bikes/scooters)
 * 2. Damage Detection (before/after comparison)
 * 3. Return Photo Verification (cars/vans)
 *
 * Related ADR: ADR-002-computer-vision-for-operations.md
 */

model {

    // =============================================================================
    // External AI & RAG Services (new for CV system)
    // =============================================================================

    cv_openai_api = external-system 'OpenAI API (GPT-4V)' {
        description 'Primary multimodal LLM provider for image analysis'
    }

    cv_anthropic_api = external-system 'Anthropic API (Claude 3.5 Sonnet)' {
        description 'Secondary multimodal LLM provider (fallback + cost optimization)'
    }

    cv_azure_openai_api = external-system 'Azure OpenAI Service' {
        description 'Enterprise LLM provider with SLA and EU data residency'
    }

    cv_weaviate_cloud = external-system 'Weaviate Cloud (Vector DB)' {
        description 'Managed vector database for RAG. Stores historical photos + decisions'
    }

    // =============================================================================
    // Extend MobilityCorp System with CV Verification Components
    // =============================================================================

    extend mobiltiy_corp {

        cv_verification = container 'CV Verification System' {
            description 'RAG-powered system for automated photo verification (docking, damage, return)'
            technology 'Node.js + TypeScript'

            // External dependencies
            -> cv_weaviate_cloud 'Retrieves 5 similar photos' 'GraphQL'
            -> cv_openai_api 'Sends photo + RAG context' 'REST API (primary)'
            -> cv_anthropic_api 'Sends photo + RAG context' 'REST API (fallback)'
            -> cv_azure_openai_api 'Sends photo + RAG context' 'REST API (enterprise)'
        }

        cv_photo_storage = database 'CV Photo Storage' {
            description 'S3-compatible storage for verification photos (90-day retention)'
            technology 'S3/MinIO'
        }

        cv_audit_db = database 'CV Decision Audit DB' {
            description 'PostgreSQL storing all CV decisions for audit trail'
            technology 'PostgreSQL'
        }

        cv_web_dashboard = webapp 'Staff CV Review Dashboard' {
            description 'Web interface for staff to review flagged verification cases'
            technology 'React + TypeScript'

            -> cv_verification 'Reviews/overrides decisions' 'HTTPS/JSON'
        }
    }

    // =============================================================================
    // Extend Existing Containers (add CV relationships)
    // =============================================================================

    extend mobiltiy_corp.customer_app {
        -> mobiltiy_corp.cv_verification 'Uploads 2-4 verification photos' 'HTTPS/JSON'
    }

    extend mobiltiy_corp.api_gateway {
        -> mobiltiy_corp.cv_verification 'Routes photo uploads' 'HTTP'
    }

    // =============================================================================
    // CV Verification System Internal Components
    // =============================================================================

    extend mobiltiy_corp.cv_verification {

        cv_photo_upload_api = component 'Photo Upload API' {
            description 'Receives photos from mobile app, validates format/size'
            technology 'Express.js REST API'
        }

        cv_preprocessing = component 'Photo Preprocessing' {
            description 'Resizes, compresses, blurs faces/plates (GDPR)'
            technology 'Sharp.js + OpenCV'

            -> mobiltiy_corp.cv_photo_storage 'Stores raw photo'
        }

        cv_orchestrator = component 'Verification Orchestrator' {
            description 'Core logic: coordinates RAG + LLM + decision flow'
            technology 'TypeScript'
        }

        cv_rag_service = component 'RAG Retrieval Service' {
            description 'Queries Weaviate for 5 most similar past photos'
            technology 'Weaviate GraphQL Client'

            -> cv_weaviate_cloud 'Similarity search' 'GraphQL'
        }

        cv_llm_abstraction = component 'LLM Abstraction Layer' {
            description 'Provider-agnostic interface. Switch OpenAI ↔ Claude ↔ Azure'
            technology 'TypeScript Strategy Pattern'
        }

        cv_openai_provider = component 'OpenAI Provider' {
            description 'GPT-4V API client with retry logic'
            technology 'OpenAI SDK'

            -> cv_openai_api 'Analyzes photo' 'REST API'
        }

        cv_anthropic_provider = component 'Anthropic Provider' {
            description 'Claude 3.5 API client'
            technology 'Anthropic SDK'

            -> cv_anthropic_api 'Analyzes photo' 'REST API'
        }

        cv_azure_provider = component 'Azure Provider' {
            description 'Azure OpenAI API client'
            technology 'Azure SDK'

            -> cv_azure_openai_api 'Analyzes photo' 'REST API'
        }

        cv_decision_handler = component 'Decision Handler' {
            description 'Processes LLM response, applies business rules (damage tolerance)'
            technology 'TypeScript'

            -> mobiltiy_corp.cv_audit_db 'Logs decision'
            -> cv_weaviate_cloud 'Stores case for future RAG' 'GraphQL'
        }

        cv_confidence_checker = component 'Confidence Checker' {
            description 'Routes low-confidence cases to human review'
            technology 'TypeScript'
        }

        cv_review_queue = component 'Human Review Queue' {
            description 'Staff dashboard queue for flagged cases'
            technology 'Redis Queue'
        }

        cv_circuit_breaker = component 'Circuit Breaker' {
            description 'Auto-switches providers if primary fails'
            technology 'TypeScript'
        }

        cv_cost_tracker = component 'Cost Tracker' {
            description 'Tracks spend by provider for optimization'
            technology 'TypeScript'
        }

        // Component relationships
        cv_photo_upload_api -> cv_preprocessing 'Sends photos'
        cv_preprocessing -> cv_orchestrator 'Sends preprocessed photo'
        cv_orchestrator -> cv_rag_service 'Fetches similar cases'
        cv_orchestrator -> cv_llm_abstraction 'Sends photo + context'
        cv_llm_abstraction -> cv_openai_provider 'Primary'
        cv_llm_abstraction -> cv_anthropic_provider 'Fallback'
        cv_llm_abstraction -> cv_azure_provider 'Enterprise'
        cv_llm_abstraction -> cv_circuit_breaker 'Uses'
        cv_orchestrator -> cv_decision_handler 'Processes response'
        cv_decision_handler -> cv_confidence_checker 'Checks confidence'
        cv_confidence_checker -> cv_review_queue 'Queues flagged cases'
    }
}
